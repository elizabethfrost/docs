{
  "openapi": "3.1.0",
  "info": {
    "version": "1",
    "title": "Solibri Cloud Checking",
    "description": "Checking Service",
    "contact": {
      "name": "Solibri Support",
      "url": "help.solibri.com",
      "email": "support@solibri.com"
    }
  },
  "servers": [
    {
      "url": "https://{environment}.solibri.com/api/v1",
      "description": "Solibri Cloud Checks API in production environment",
      "variables": {
        "environment": {
          "default": "checks",
          "enum": [
            "checks",
            "checks-dev",
            "checks-staging"
          ]
        }
      }
    },
    {
      "url": "http://localhost:3333",
      "description": "Solibri Cloud Checking API in local development"
    }
  ],
  "paths": {
    "/v1/check-jobs": {
      "post": {
        "tags": [
          "Rule Checking"
        ],
        "summary": "Create Check Job",
        "description": "To create a Check Job, start with providing one or many\nCSET files to this endpoint.\nIn all successfull cases the response has the ID for the job.\nThe client is then responsible on polling the status of\nthe job and requesting for the result from `getCheckJobStatus` endpoint.\n",
        "operationId": "createCheckJob",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Definition of the check to be run",
                "properties": {
                  "csets": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CsetFileBase64"
                    }
                  },
                  "bcfVersion": {
                    "enum": [
                      "3.0",
                      "2.0",
                      "2.1",
                      "1.0"
                    ]
                  },
                  "ifcFiles": {
                    "type": "array",
                    "description": "List of IFC Files. These should be publicly available, for example short living signed URLs to S3.",
                    "items": {
                      "$ref": "#/components/schemas/IfcUrl"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "The check is submitted.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The Id of the check job"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid Request"
          },
          "401": {
            "$ref": "#/components/responses/401-Unauthorized"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "servers": [
          {
            "url": "https://{environment}.solibri.com/api/v1",
            "description": "Solibri Cloud Checks API in production environment",
            "variables": {
              "environment": {
                "default": "checking-api",
                "enum": [
                  "checking-api",
                  "checking-api-dev",
                  "checking-api-staging"
                ]
              }
            }
          },
          {
            "url": "http://localhost:3333",
            "description": "Solibri Cloud Checking API in local development"
          }
        ]
      }
    },
    "/v1/check-jobs/{checkJobId}": {
      "get": {
        "tags": [
          "Rule Checking"
        ],
        "summary": "Get Check",
        "description": "Get check by id.",
        "operationId": "getCheckStatus",
        "parameters": [
          {
            "$ref": "#/components/parameters/CheckJobIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Get rule checking job.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckJobOutputModel"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401-Unauthorized"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "servers": [
          {
            "url": "https://{environment}.solibri.com/api/v1",
            "description": "Solibri Cloud Checks API in production environment",
            "variables": {
              "environment": {
                "default": "checking-api",
                "enum": [
                  "checking-api",
                  "checking-api-dev",
                  "checking-api-staging"
                ]
              }
            }
          },
          {
            "url": "http://localhost:3333",
            "description": "Solibri Cloud Checking API in local development"
          }
        ]
      },
      "delete": {
        "tags": [
          "Rule Checking"
        ],
        "summary": "Stop Check",
        "description": "Stop a running checking job",
        "operationId": "stopCheckJob",
        "parameters": [
          {
            "$ref": "#/components/parameters/CheckJobIdParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "servers": [
          {
            "url": "https://{environment}.solibri.com/api/v1",
            "description": "Solibri Cloud Checks API in production environment",
            "variables": {
              "environment": {
                "default": "checking-api",
                "enum": [
                  "checking-api",
                  "checking-api-dev",
                  "checking-api-staging"
                ]
              }
            }
          },
          {
            "url": "http://localhost:3333",
            "description": "Solibri Cloud Checking API in local development"
          }
        ]
      }
    },
    "/v1/check-jobs/{checkJobId}/result": {
      "get": {
        "tags": [
          "Rule Checking"
        ],
        "summary": "Get Check Job Result",
        "description": "Get the result of a Check Job. The version of BCF is defined when starting a check.",
        "operationId": "getCheckJobResult",
        "parameters": [
          {
            "$ref": "#/components/parameters/CheckJobIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "base64EncodedBCF": {
                      "type": "string",
                      "description": "Base64 encoded BCF data.",
                      "format": "byte"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401-Unauthorized"
          }
        },
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "servers": [
          {
            "url": "https://{environment}.solibri.com/api/v1",
            "description": "Solibri Cloud Checks API in production environment",
            "variables": {
              "environment": {
                "default": "checking-api",
                "enum": [
                  "checking-api",
                  "checking-api-dev",
                  "checking-api-staging"
                ]
              }
            }
          },
          {
            "url": "http://localhost:3333",
            "description": "Solibri Cloud Checking API in local development"
          }
        ]
      }
    }
  },
  "tags": [
    {
      "name": "Rule Checking",
      "description": "Endpoints for executing checks"
    }
  ],
  "components": {
    "parameters": {
      "CheckJobIdParameter": {
        "name": "checkJobId",
        "in": "path",
        "description": "The Unique identifier for a Check Job that is received when calling `createCheckJob` operation",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "description": "The API Key will be provided separately.",
        "name": "X-Api-key",
        "in": "header"
      }
    },
    "responses": {
      "401-Unauthorized": {
        "description": "User does not have valid credentials to access resouce.",
        "content": {
          "application/json": {
            "schema": {
              "type": [
                "object",
                "null"
              ]
            }
          }
        }
      }
    },
    "schemas": {
      "CsetFileBase64": {
        "type": "string",
        "description": "Base64 encoded CSET file",
        "format": "byte"
      },
      "IfcUrl": {
        "type": "string",
        "format": "uri"
      },
      "CheckJobOutputModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "submissionTime": {
            "type": "string",
            "format": "date-time"
          },
          "startTime": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          },
          "endTime": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "enum": [
              "ABORTED",
              "DATARECEIVED",
              "ERROR",
              "PROCESSING",
              "FINISHED",
              "STARTED",
              "SUBMITTED"
            ]
          }
        }
      }
    }
  }
}